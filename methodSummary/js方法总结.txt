splice (实现增加和删除)
    Array.splice(index,num,{})
    // index是数组下标，从0开始，即增删操作起始的元素下标（包括该元素）。
    // num是删除元素的个数，为0时不删除。
    // {}时新增的对象。
    
JSON.parse(obj，replacer，space)
    //obj是一个对象
    // replacer可以是一个方法或者一个数组，做序列化时的过滤
      方法replacer = (key,value) => {
        //key是obj的key，
        //value是obj的value，
      }
      数组replacer = ['','']
      //数组元素是字符串，可以当作key进行匹配，做过滤
     //space为了样式，可以是数字或者字符串，如果是数字（最大为10）的话，代表每行代码的缩进是多少个空格。如果是字符串的话，该字符串（最多前十个字符）将作显示在每行代码之前。

对象遍历输出 
    key可以通过parseInt转为数字类型的元素，按数字升序排列，其余的按构建顺序排列。

js中filter用法 
    https://www.cnblogs.com/aidixie/p/11283714.html

js的reduce方法
    https://www.cnblogs.com/amujoe/p/11376940.html

箭头函数
    const a = param => {
        return{
            name:'zhang'
        }
    }

    可简写为
        const a = param => ({
            name:'zhang '
        })


    const b = param => ({
        return true
    })
        可简写为
            const b = param => true

析构赋值
    const obj = {a:1,b:2,c:3}
    const {a,b,c} = obj和const {a,b,...rest} = obj的区别

JSON转换
    const obj = {a:1,b:2,c:3}
    const b = JSON.stringify(obj)//转化为JSON字符串，用于当一个对象想显示时（对象不能直接显示），执行此句将对象转化为JSON字符串
    b = {"a":1,"b":2,"c" :3}
    const c = JSON.parse(b)//解析为对象
    c = {a:1,b:2,c:3}

普通函数和箭头函数  
    1.外形不同

    2.普通函数可以有具体函数也可以有匿名函数,而箭头函数全是匿名函数
        具体函数：
            function func () {

            }
        匿名函数：
            let func = function () {
                
            }

    3.普通函数可以用于构造函数，箭头函数不能用作构造函数

    4.箭头函数中this的指向不同
        普通函数，this指向调用它的对象或者创建的对象实例
        箭头函数，本身没有this，在声明时可以捕获别人的this供自己使用（捕获它所处作用域中的this，并且this一旦捕获，以后将不再变化）
    switch case的用法
    //如果不加break,前面的不会执行,但后面的case仍会执行!!!
    //不加break的情况,return了则后面的不执行了
        let a = 1
        switch(a){
            case 1:
                console.log('1111')
                break
            case 2:
                console.log('2222')
                break
        }

call和apply的方法：
    //不同点，接受参数的方式不同
    function add(c,d){
        return this.a + this.b + c + d;
    }

    var s = {a:1, b:2};
    console.log(add.call(s,3,4)); // 1+2+3+4 = 10
    console.log(add.apply(s,[5,6])); // 1+2+5+6 = 14